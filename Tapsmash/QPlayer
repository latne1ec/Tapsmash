//
//  ContentViewController.m
//  Tapsmash
//
//  Created by Evan Latner on 11/17/15.
//  Copyright Â© 2015 tapsmash. All rights reserved.
//

#import "ContentViewController.h"
#import "SDWebImageManager.h"
#import "AppDelegate.h"
#import "WelcomeViewController.h"

@interface ContentViewController ()

@property (nonatomic, strong) AppDelegate *appDelegate;
@property BOOL replayViewShowing;
@property BOOL currentlyQuerying;
@property (nonatomic, strong) UIView *replayView;
@property (nonatomic, strong) UIView *playerOneView;
@property (nonatomic, strong) UIView *playerTwoView;
@property (nonatomic, strong) NSMutableArray *updatedVideoArray;
@property (nonatomic) BOOL controllerIsDismissing;
@property (nonatomic) BOOL shareShowing;
@property (nonatomic, strong) NSMutableArray *playerItemArray;

@end

@implementation ContentViewController

int currentIndex;
int currentSkipCount;
int videoCount;
int canSkip;


-(BOOL)prefersStatusBarHidden {
return YES;
}

- (void)viewDidLoad {
[super viewDidLoad];

_shareShowing = NO;

_appDelegate = [[UIApplication sharedApplication] delegate];

_replayViewShowing = false;
_currentlyQuerying = false;

self.indicator = [[UIActivityIndicatorView alloc]initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhite];
self.indicator.frame = CGRectMake(0.0, 0.0, 40.0, 40.0);
self.indicator.center = self.view.center;

_controllerIsDismissing = FALSE;

self.view.backgroundColor = [UIColor blackColor];
self.playerView.hidden = YES;
[self performSelector:@selector(queryForContent) withObject:nil afterDelay:0.45];


self.avPlayer = [[AVPlayer alloc] init];
self.avPlayerItem = [AVPlayerItem alloc];
self.urlAsset = [AVURLAsset alloc];

[[NSNotificationCenter defaultCenter] addObserver:self
selector:@selector(playerItemDidReachEnd:)
name:AVPlayerItemDidPlayToEndTimeNotification
object:[self.avPlayer currentItem]];


currentSkipCount = 0;

[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(appWillResignActive) name:UIApplicationWillResignActiveNotification object:nil];

[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(appDidBecomeActive) name:UIApplicationDidBecomeActiveNotification object:nil];

[self.navigationController setNavigationBarHidden:YES];


self.subtitleLabel.adjustsFontSizeToFitWidth = YES;
self.subtitleLabel.minimumScaleFactor = 0;

UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePanGesture:)];
[self.view addGestureRecognizer:pan];

[self.view bringSubviewToFront:self.shareButton];
self.shareButton.hidden = YES;

UILongPressGestureRecognizer *cancelButtonPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(doThis:)];
cancelButtonPress.delegate = (id)self;
cancelButtonPress.minimumPressDuration = 0.01;
[self.shareButton addGestureRecognizer:cancelButtonPress];

[self.view addSubview:self.indicator];
[self.indicator setHidden:NO];
[self.indicator startAnimating];

}

-(void)setupTimer {

self.dasTimer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(resumeTheVideo) userInfo:nil repeats:YES];
[[NSRunLoop currentRunLoop] addTimer:self.dasTimer forMode:NSDefaultRunLoopMode];
}

-(void)resumeTheVideo {

if (self.contentArray.count > 0) {

if (_shareShowing) {

} else {
[self.qPlayer play];
}
}
}

-(void)handlePanGesture:(UIPanGestureRecognizer *)sender {

[self.qPlayer pause];

CGPoint velocity = [sender velocityInView:self.view];

if(velocity.y > 0) {
//NSLog(@"gesture went down");
} else {
//NSLog(@"gesture went up");
}

CGPoint translation = [sender translationInView:self.view];
CGFloat verticalMovement = translation.y / self.view.bounds.size.height*1.72;
float downwardMovement = fmaxf(verticalMovement, 0.0);
float downwardMovementPercent = fmin(downwardMovement, 1.0);
CGFloat progress = downwardMovementPercent;

self.view.clipsToBounds = YES;

self.view.alpha = 1-progress*1.36;

if (sender.state == UIGestureRecognizerStateBegan) {
_controllerIsDismissing = TRUE;
self.interactor.hasStarted = TRUE;
[self dismissViewControllerAnimated:YES completion:nil];
}
if (sender.state == UIGestureRecognizerStateChanged) {
self.interactor.shouldFinish = progress > 0.3;
[self.interactor updateInteractiveTransition:progress];
}
if (sender.state == UIGestureRecognizerStateCancelled) {
[UIView animateWithDuration:0.1 animations:^{
self.view.alpha = 1.0;
} completion:^(BOOL finished) {
}];
[self.interactor cancelInteractiveTransition];
}
if (sender.state == UIGestureRecognizerStateEnded) {

self.interactor.hasStarted = FALSE;
if (self.interactor.shouldFinish) {

[self.qPlayer pause];
self.qPlayer = nil;
[[NSNotificationCenter defaultCenter] postNotificationName:@"change_home_pic" object:self];
_controllerIsDismissing = FALSE;
[self.interactor finishInteractiveTransition];
} else {
[UIView animateWithDuration:0.04 animations:^{
self.view.alpha = 1.0;
self.view.layer.cornerRadius = 0;
} completion:^(BOOL finished) {
[[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationNone];
}];
[self.interactor cancelInteractiveTransition];
}
}
}


-(void)appDidBecomeActive {

if (self.contentArray.count > 0) {

PFObject *currentContent = [self.contentArray objectAtIndex:currentIndex];
if ([[currentContent objectForKey:@"postType"] rangeOfString:@"video"].location != NSNotFound) {
[self.avPlayer play];
}
}
}

-(void)addTapTapRecoginzer {

self.tapTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleSingleTap)];
self.tapTap.delegate = (id)self;
self.tapTap.numberOfTapsRequired = 1;
self.tapTap.numberOfTouchesRequired = 1;
self.tapTap.delaysTouchesBegan = YES;      //Important to add
[self.view addGestureRecognizer:self.tapTap];

}

-(void)appWillResignActive {

[self.avPlayer pause];
[self.indicator setHidden:YES];
[self.dasTimer invalidate];

[[NSUserDefaults standardUserDefaults] synchronize];

if (_replayViewShowing) {

[self performSelector:@selector(fadehome) withObject:nil afterDelay:0.63];

}

if (_currentlyQuerying) {
[self performSelector:@selector(fadehome) withObject:nil afterDelay:0.63];
}
}

-(void)fadehome {

[CATransaction begin];
[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions];
CATransition *transition = [CATransition animation];
[transition setType:kCATransitionFade];
[self.navigationController.view.layer addAnimation:transition forKey:@"someAnimation"];
[UIApplication sharedApplication].statusBarHidden = NO;
//[self.navigationController popToRootViewControllerAnimated:NO];
[self dismissViewControllerAnimated:NO completion:nil];
[CATransaction commit];

}

-(void)viewWillDisappear:(BOOL)animated {

//    AppDelegate *appD = (AppDelegate *)[[UIApplication sharedApplication] delegate];
//    [appD registerUserForOneSignalPushNotifications];

[[NSNotificationCenter defaultCenter] removeObserver:UIApplicationWillResignActiveNotification];
[[NSNotificationCenter defaultCenter] removeObserver:UIApplicationDidBecomeActiveNotification];

[self.qPlayer pause];
[self.indicator setHidden:YES];
[self.dasTimer invalidate];
[[NSUserDefaults standardUserDefaults] synchronize];

if (self.webview.observationInfo == nil) {
} else {
[self.webview removeObserver:self forKeyPath:@"estimatedProgress"];
}
}

-(void)viewWillAppear:(BOOL)animated {

if (_controllerIsDismissing) {
[self.qPlayer play];
} else {

self.navigationController.navigationBar.backItem.hidesBackButton = YES;
[self.navigationItem setHidesBackButton:YES animated:YES];

if (_shareShowing) {
_shareShowing = NO;
} else {
currentIndex = 0;
videoCount = 0;
}
}
}

-(void)handleSingleTap {

currentSkipCount++;

[self.qPlayer pause];

if (_replayViewShowing) {

} else {

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

int i = [[[NSUserDefaults standardUserDefaults] objectForKey:@"localUserScore"] intValue];
[[NSUserDefaults standardUserDefaults] setInteger:i+1 forKey:@"localUserScore"];

PFObject *currentContent = [self.contentArray objectAtIndex:currentIndex];
[[NSUserDefaults standardUserDefaults] setObject:currentContent.objectId forKey:@"lastSeenContentId"];

});
}


if (currentIndex+1 >= self.contentArray.count) {

[self.indicator setHidden:YES];
[self showReplayView];
[self.dasTimer invalidate];


} else {

currentIndex = currentIndex + 1;

PFObject *currentContent = [self.contentArray objectAtIndex:currentIndex];
self.contentCountLabel.text = [NSString stringWithFormat:@"%lu", (unsigned long)self.contentArray.count - currentIndex];

if ([[currentContent objectForKey:@"postType"] rangeOfString:@"video"].location != NSNotFound) {
[self.qPlayer pause];
[self.qPlayer advanceToNextItem];
}

[self displayContent];
}
}

-(void)showReplayView {

_replayViewShowing = true;
[self.avPlayer pause];

self.indicator.hidden = YES;

PFObject *lastObject = [self.contentArray lastObject];
[[NSUserDefaults standardUserDefaults] setObject:lastObject.objectId forKey:@"lastSeenContentId"];
[[NSUserDefaults standardUserDefaults] synchronize];

self.replayView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
[self.view addSubview:self.replayView];
self.replayView.backgroundColor = [UIColor colorWithRed:0.004 green:0.694 blue:0.953 alpha:1];
self.replayView.alpha = 0.0;
self.replayButton = [[UIButton alloc] init];
self.replayButton.frame = CGRectMake(0, 0, 300, 100);
self.replayButton.center = self.view.center;
[self.replayButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
[self.replayButton setTitleColor:[UIColor lightGrayColor] forState:UIControlStateSelected];
self.replayButton.titleLabel.font = [UIFont fontWithName:@"AvenirNext-Bold" size:19.6];
self.replayButton.titleLabel.numberOfLines = 2;
[self.replayButton.titleLabel setTextAlignment:NSTextAlignmentCenter];
[self.replayButton setTitle:@"no new posts ðŸ”„\ntap to replay" forState:UIControlStateNormal];
[self.replayButton addTarget:self action:@selector(replayShow) forControlEvents:UIControlEventTouchUpInside];
self.replayButton.alpha = 1.0;
UIButton *buttonTwo = [[UIButton alloc] init];
buttonTwo.frame = CGRectMake(self.replayButton.frame.origin.x, self.replayButton.frame.origin.y+200, 300, 100);
//buttonTwo.center = self.view.center;
[buttonTwo setTitleColor:[UIColor colorWithWhite:1 alpha:0.94] forState:UIControlStateNormal];
[buttonTwo setTitleColor:[UIColor colorWithWhite:1 alpha:0.94] forState:UIControlStateSelected];
buttonTwo.titleLabel.font = [UIFont fontWithName:@"AvenirNext-Bold" size:20];
buttonTwo.titleLabel.numberOfLines = 2;
[buttonTwo.titleLabel setTextAlignment:NSTextAlignmentCenter];
[buttonTwo setTitle:@"home" forState:UIControlStateNormal];
[buttonTwo addTarget:self action:@selector(didCloseButtonTouch) forControlEvents:UIControlEventTouchUpInside];

[self.replayView addSubview:self.replayButton];

UITapGestureRecognizer *replayTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(replayShow)];
replayTap.numberOfTapsRequired = 1;
[self.replayView addGestureRecognizer:replayTap];

[UIView animateWithDuration:0.1 delay:0.09 options:0 animations:^{
self.replayView.alpha = 1.0;
} completion:^(BOOL finished) {
}];

}

-(void)replayShow {

self.view.backgroundColor = [UIColor blackColor];

self.replayView.backgroundColor = [UIColor blackColor];
[self.view sendSubviewToBack:self.replayView];

self.subtitleLabel.text = @"";

currentIndex = 0;
currentSkipCount = 0;
self.contentCountLabel.text = @"";
self.imageView.hidden = YES;

[self.contentArray removeAllObjects];

dispatch_async(dispatch_get_main_queue(), ^{
[self.replayView removeFromSuperview];
});

[self.replayView removeFromSuperview];
[self replayQuery];

}


-(void)displayContent {

[self playDasVideo];

}

- (NSString *)extractYoutubeIdFromLink:(NSString *)link {

NSString *regexString = @"((?<=(v|V)/)|(?<=be/)|(?<=(\\?|\\&)v=)|(?<=embed/))([\\w-]++)";
NSRegularExpression *regExp = [NSRegularExpression regularExpressionWithPattern:regexString
options:NSRegularExpressionCaseInsensitive
error:nil];

NSArray *array = [regExp matchesInString:link options:0 range:NSMakeRange(0,link.length)];
if (array.count > 0) {
NSTextCheckingResult *result = array.firstObject;
return [link substringWithRange:result.range];
}
return nil;
}

//// ********************* VIDEO

-(void)playerItemDidReachEnd:(NSNotification *)notification  {

if (currentIndex+1 >= self.contentArray.count) {
[self.dasTimer invalidate];
self.dasTimer = nil;
}
[self handleSingleTap];
}

-(void)playDasVideo {

[CATransaction setDisableActions:YES];
[self.view bringSubviewToFront:self.playerOneView];
self.avPlayerLayer.hidden = NO;
[self.qPlayer play];
[self addcaption];

[self.view bringSubviewToFront:self.bottomFade];
[self.view bringSubviewToFront:self.topFade];
[self.view bringSubviewToFront:self.contentCountLabel];
[self.view bringSubviewToFront:self.subtitleLabel];
[self.view bringSubviewToFront:self.likeButton];
self.shareButton.hidden = NO;
[self.view bringSubviewToFront:self.shareButton];

videoCount = videoCount + 1;

}

-(void)addcaption {

NSURL *url = [self urlOfCurrentlyPlayingInPlayer:self.qPlayer];
NSString *urlString = [NSString stringWithFormat:@"%@", url];
self.subtitleLabel.text = @"";

for (PFObject *object in self.contentArray) {
if ([[object objectForKey:@"postLink"] isEqualToString:urlString]) {
self.subtitleLabel.text = [object objectForKey:@"postTitle"];
}
}
}

-(NSURL *)urlOfCurrentlyPlayingInPlayer:(AVPlayer *)player{
// get current asset
AVAsset *currentPlayerAsset = player.currentItem.asset;
// make sure the current asset is an AVURLAsset
if (![currentPlayerAsset isKindOfClass:AVURLAsset.class]) return nil;
// return the NSURL
return [(AVURLAsset *)currentPlayerAsset URL];
}


- (void)didCloseButtonTouch {

[self.navigationController popToRootViewControllerAnimated:NO];
}

-(void)queryForContent {

_currentlyQuerying = true;

NSCalendar *cal = [NSCalendar currentCalendar];
NSDateComponents *components = [cal components:( NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond ) fromDate:[[NSDate alloc] init]];

[components setHour:-48];
[components setMinute:0];
[components setSecond:0];
NSDate *yesterday = [cal dateByAddingComponents:components toDate: [NSDate date] options:0];


PFQuery *query = [PFQuery queryWithClassName:@"Posts"];
[query whereKey:@"postChannel" notEqualTo:@"nil"];
[query whereKey:@"postType" equalTo:@"video"];
[query whereKey:@"postSource" equalTo:@"twitter"];
[query whereKey:@"createdAt" greaterThanOrEqualTo:yesterday];
[query orderByDescending:@"createdAt"];
[query setLimit:100];
[query findObjectsInBackgroundWithBlock:^(NSArray * _Nullable objects, NSError * _Nullable error) {
if (error) {
_currentlyQuerying = false;
} else {

if (objects.count == 0) {
}

self.contentArray = [objects mutableCopy];

NSArray* reversedArray = [[self.contentArray reverseObjectEnumerator] allObjects];

self.contentArray = [reversedArray mutableCopy];

int i = 0;

PFObject *lastObject = [self.contentArray lastObject];

_currentlyQuerying = false;

if ([lastObject.objectId isEqualToString:[[NSUserDefaults standardUserDefaults] objectForKey:@"lastSeenContentId"]]) {
[self showReplayView];
return;
} else {

self.updatedVideoArray = [[NSMutableArray alloc] init];

for (PFObject *object in self.contentArray) {
NSString *objectId = [object valueForKey:@"objectId"];

i++;

//Create new video array to remove older videos
if ([[object objectForKey:@"postType"] isEqualToString:@"video"]) {
NSString *urlString = [object objectForKey:@"postLink"];
[self.updatedVideoArray addObject:urlString];
}

if ([objectId isEqualToString:[[NSUserDefaults standardUserDefaults] objectForKey:@"lastSeenContentId"]]) {

currentIndex = i;
[self displayContent];
[self setupTimer];
[self downloadVids];
self.contentCountLabel.text = [NSString stringWithFormat:@"%lu", (unsigned long)self.contentArray.count-currentIndex];
[self addTapTapRecoginzer];

return;
}
}

self.updatedVideoArray = [[NSMutableArray alloc] init];
[self displayContent];
[self downloadVids];
[self setupTimer];
[self addTapTapRecoginzer];
self.contentCountLabel.text = [NSString stringWithFormat:@"%lu", (unsigned long)self.contentArray.count];

}
}
}];
}

-(void)replayQuery {

_currentlyQuerying = true;

[self.view addSubview:self.indicator];
[self.indicator setHidden:NO];
[self.indicator startAnimating];

NSCalendar *cal = [NSCalendar currentCalendar];
NSDateComponents *components = [cal components:( NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond ) fromDate:[[NSDate alloc] init]];

[components setHour:-48];
[components setMinute:0];
[components setSecond:0];
NSDate *yesterday = [cal dateByAddingComponents:components toDate: [NSDate date] options:0];


PFQuery *query = [PFQuery queryWithClassName:@"Posts"];
[query whereKey:@"postChannel" notEqualTo:@"nil"];
[query whereKey:@"createdAt" greaterThanOrEqualTo:yesterday];
[query whereKey:@"postType" equalTo:@"video"];
[query whereKey:@"postSource" equalTo:@"twitter"];
[query orderByDescending:@"createdAt"];
[query setLimit:100];
[query findObjectsInBackgroundWithBlock:^(NSArray * _Nullable objects, NSError * _Nullable error) {
if (error) {
} else {

_currentlyQuerying = false;
self.contentArray = [objects mutableCopy];
NSArray* reversedArray = [[self.contentArray reverseObjectEnumerator] allObjects];
self.contentArray = [reversedArray mutableCopy];

[self displayContent];
[self downloadVids];
[self setupTimer];
self.contentCountLabel.text = [NSString stringWithFormat:@"%lu", (unsigned long)self.contentArray.count];
[self.view bringSubviewToFront:self.contentCountLabel];
//self.contentCountLabel.hidden = YES;
[self addTapTapRecoginzer];
}
}];
}

-(void)downloadVids {

self.playerItemArray = [[NSMutableArray alloc] init];

for (PFObject *object in self.contentArray) {

NSString *postType = [object valueForKey:@"postType"];

if ([postType isEqualToString:@"video"] && [[object objectForKey:@"postSource"] isEqualToString:@"twitter"]) {
NSString *urlString = [object objectForKey:@"postLink"];

if ([self.updatedVideoArray containsObject:urlString]) {

} else {

NSURL *url = [NSURL URLWithString:urlString];

AVAsset *asset = [AVAsset assetWithURL:url];
AVPlayerItem *item = [AVPlayerItem playerItemWithAsset:asset];
[self.playerItemArray addObject:item];

}
}
else {

}
}
self.qPlayer = [[AVQueuePlayer alloc] initWithItems:self.playerItemArray];
self.playerOneView = [[UIView alloc] initWithFrame:self.view.frame];
self.playerOneView.backgroundColor = [UIColor blackColor];
self.avPlayerLayer = [AVPlayerLayer playerLayerWithPlayer: self.qPlayer];
self.avPlayerLayer.frame = self.view.layer.bounds;
self.avPlayerLayer.videoGravity = AVLayerVideoGravityResizeAspectFill;
[self.playerOneView.layer addSublayer:self.avPlayerLayer];
[self.view addSubview:self.playerOneView];
[self.view bringSubviewToFront:self.playerOneView];
[self playDasVideo];

}

-(void)getVideoThumbnails {

NSURL *url;

AVURLAsset *asset=[[AVURLAsset alloc] initWithURL:url options:nil];
AVAssetImageGenerator *generator = [[AVAssetImageGenerator alloc] initWithAsset:asset];
generator.appliesPreferredTrackTransform=TRUE;
CMTime thumbTime = CMTimeMakeWithSeconds(0,30);

AVAssetImageGeneratorCompletionHandler handler = ^(CMTime requestedTime, CGImageRef im, CMTime actualTime, AVAssetImageGeneratorResult result, NSError *error){
};

CGSize maxSize = CGSizeMake(self.view.frame.size.width, self.view.frame.size.height);
generator.maximumSize = maxSize;
[generator generateCGImagesAsynchronouslyForTimes:[NSArray arrayWithObject:[NSValue valueWithCMTime:thumbTime]] completionHandler:handler];
}

-(void)doThis: (UILongPressGestureRecognizer *)recognizer {

if (recognizer.state == UIGestureRecognizerStateBegan) {

[UIView animateWithDuration:0.125 animations:^{

self.shareButton.transform = CGAffineTransformMakeScale(1.224, 1.224);

} completion:^(BOOL finished) {

}];
}

if (recognizer.state == UIGestureRecognizerStateEnded) {

[UIView animateWithDuration:0.125 animations:^{
self.shareButton.transform = CGAffineTransformMakeScale(1.0, 1.0);

} completion:^(BOOL finished) {
[self shareButtonPressed];
}];
}
}

-(void)shareButtonPressed {

self.objectsToShare = [[NSArray alloc] init];

[self.qPlayer pause];
_shareShowing = YES;

PFObject *currentContent = [self.contentArray objectAtIndex:currentIndex];
NSString* newString = @"Shared via Tapsmash";
NSString *urlString = [currentContent objectForKey:@"postLink"];
NSURL *videoLink = [NSURL URLWithString:urlString];

NSData *videoData = [NSData dataWithContentsOfURL:videoLink];

[videoData writeToFile:[NSHomeDirectory() stringByAppendingPathComponent:@"Documents/image.mov"] atomically:YES];
NSString* path = [NSHomeDirectory() stringByAppendingPathComponent:@"Documents/image.mov"];

NSURL *videoURL = [NSURL fileURLWithPath:path];

if ([[currentContent objectForKey:@"postType"] isEqualToString:@"image"]) {

UIImage *watermarkImage = [UIImage imageNamed:@"black"];

UIGraphicsBeginImageContext(self.imageView.image.size);
[self.imageView.image drawInRect:CGRectMake(0, 0, self.imageView.image.size.width, self.imageView.image.size.height)];
[watermarkImage drawInRect:CGRectMake(0,0,100,100)];
UIImage *result = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();


self.objectsToShare = @[result];
} else {
self.objectsToShare = @[newString, videoURL];
}

//NSArray *objectsToShare = @[newString, self.imageView.image];
UIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:self.objectsToShare applicationActivities:nil];


NSArray *excludeActivities = @[UIActivityTypeAirDrop,
UIActivityTypePrint,
UIActivityTypeCopyToPasteboard,
UIActivityTypeAssignToContact,
UIActivityTypeSaveToCameraRoll,
UIActivityTypeAddToReadingList,
UIActivityTypePostToFlickr,
UIActivityTypePostToVimeo];

activityVC.excludedActivityTypes = excludeActivities;
[self presentViewController:activityVC animated:YES completion:^{

[ProgressHUD dismiss];

}];

[activityVC setCompletionWithItemsHandler:^(NSString *activityType, BOOL completed, NSArray *returnedItems, NSError *activityError) {

[self.qPlayer play];
_shareShowing = NO;

}];
}

@end